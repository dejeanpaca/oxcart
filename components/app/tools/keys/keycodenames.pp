{
   keycodenames, creates a list of keycode names
   Copyright (c) 2009. Dejan Boras

      This program will create a keycode name list from the appKeyCodes.inc
   file. It is required to be done whenever appKeyCodes.inc is changed to make
   sure that keycode names list is valid.
}

{$INCLUDE oxheader.inc}
PROGRAM keycodenames;

USES
   StringUtils, ConsoleUtils,
   uSimpleParser;

TYPE
   TKeyCodeName = string[63];

   TKeyCode = record
      kcName: TKeyCodeName;
   end;

VAR
   kcnames: array[0..255] of TKeyCode;
   maxKeycodes: longint = 0;
   parseData: TParseData;

function doReadFile(var p: TParseData): boolean;
var
   item: string;
   value, code: longint;
   kcName: TKeyCodeName;
   s: string;

begin
   Result := true;
   s := p.CurrentLine;

   {check the string}
   if(pos('=', s) <> 0) and (pos(';', s) <> 0) then begin
      {get the keycode name}
      item := CopyToDel(s, '=');
      StripWhiteSpace(item);

      {check the keycode name}
      {NOTE: Keycode constant have a 'kc' prefix and have at least
      1 character(therefore the minimum size is 3 characters).}
      if(pos('kc', item) = 0) or (Length(item) < 3) then
         exit;

      kcName := item;

      {delete the equal symbol}
      delete(s, 1, 1);

      {get the keycode value}
      item := CopyToDel(s, ';');
      StripWhitespace(s);

      val(item, value, code);

      {add the keycode to the list}
      if(code = 0) and (value < 255) and (value > 0) then
         kcnames[value].kcName := kcName;
   end;
end;

procedure ProcessData();
var
   i, max: longint;

begin
   max := 0;

   for i := 0 to 255 do begin
      if(Length(kcnames[i].kcName) > 2) then
         max := i;
   end;

   maxKeycodes := max;
end;

function doWriteFile(var p: TParseData): boolean;
var
   i: longint;
   s, ls: string;

begin
   Result := true;

   {write a header}
   p.WriteLine('{');
   p.WriteLine('   File generated by keycodenames program from appKeyCodes.inc.');

   p.WriteLine('}');
   p.WriteLine('');

   {write constants}
   p.WriteLine('   appkcKeyCodeNames = '+sf(maxKeycodes + 1) + ';');
   p.WriteLine('');

   {write keycode strings}
   p.WriteLine('   {keycode name strings}');

   for i := 0 to maxKeycodes do begin
      if(Length(kcnames[i].kcName) > 0) then begin
         s := 'kcs' + copy(kcnames[i].kcName, 3, 255);

         s := '   ' + s + ': string[' + sf(Length(kcnames[i].kcName)) + '] = ''' +
            kcnames[i].kcName + ''';';

         ls := sf(i);
         AddLeadingPadding(ls, '0', 3);

         p.WriteLine(s + ' {' + ls + '}');
      end;
   end;

   p.WriteLine('');

   {write the keycode name array, a list of pointers to strings}
   p.WriteLine('   {keycode name array}');
   p.WriteLine('   kcKeyCodeNames: array[0..appkcKeyCodeNames-1] of pshortstring = (');

   for i := 0 to maxKeycodes do begin
      if(Length(kcnames[i].kcName) > 0) then begin
         s := '@kcs' + copy(kcnames[i].kcName, 3, 255);
      end else
         s := 'nil';

      if(i < maxKeycodes) then
         s := s + ',';

      ls := sf(i);
      AddLeadingPadding(ls, '0', 3);

      p.WriteLine('{' + ls + '}' + s);
   end;

   p.WriteLine(');');
end;

BEGIN
   writeln('keycodenames');
   writeln();

   {read the file}

   TParseData.Init(parseData);
   writeln('Reading file ...');
   parseData.Read('KeyCodes.inc', TParseMethod(@doReadFile));

   if(parseData.ErrorCode <> 0) then
      exit;

   {process data}
   ProcessData();

   if(maxKeycodes = 0) then begin
      console.e('There are no keycodes.');
      exit;
   end;

   {write the file}
   writeln('Writing file ...');
   parseData.Write('kcNames.inc', TParseMethod(@doWriteFile));

   if(parseData.ErrorCode <> 0)
      then exit;

   Writeln('Operation completed successfully.');
END.
