{
   oxeduEditRenderers, oxed edit window renderers
   Copyright (C) 2016. Dejan Boras

   Started On:    24.04.2017.
}

{$INCLUDE oxdefines.inc}
UNIT oxeduComponentGlyph;

INTERFACE

   USES
      uStd, uInit,
      {ox}
      oxuComponent, oxuTexture, oxuDefaultTexture, oxuResourcePool,
      {oxed}
      oxeduIcons;

TYPE
   oxedPComponentGlyph = ^oxedTComponentGlyph;

   { oxedTComponentGlyph }

   oxedTComponentGlyph = record
      Component: oxTComponentType;
      Name: string;
      Code: loopint;
      {glyph texture associated with this entity}
      Texture: oxTTexture;

      procedure Initialize(out glyph: oxedTComponentGlyph);

      procedure CreateTexture();

      {destroy texture}
      procedure Destroy();
   end;

VAR
   oxedGlyphTextureSize: loopint;

IMPLEMENTATION

{ oxedTComponentGlyph }

procedure oxedTComponentGlyph.Initialize(out glyph: oxedTComponentGlyph);
begin
   ZeroPtr(@glyph, SizeOf(glyph));
end;


procedure oxedTComponentGlyph.CreateTexture();
begin
   if(Texture = nil) then begin
      {generate a texture by glyph name}
      if(Name <> '') then
         Texture := oxedIcons.Create(Name, oxedGlyphTextureSize);

      {next try using code if nothing generated by name}
      if(Code <> 0) and ((Texture = nil) or (Texture = oxDefaultTexture.Texture)) then
           Texture := oxedIcons.Create(Code, oxedGlyphTextureSize);
   end;
end;

procedure oxedTComponentGlyph.Destroy();
begin
   oxResource.Destroy(Texture);
end;

INITIALIZATION
   oxedGlyphTextureSize := 64;

END.
